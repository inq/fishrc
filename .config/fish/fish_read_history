- cmd: function __fish_git_prompt --description 'Prompt function for Git'\nset -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD ^/dev/null)\ntest -n "$repo_info"\nor return\n\nset -l git_dir $repo_info[1]\nset -l inside_gitdir $repo_info[2]\nset -l bare_repo $repo_info[3]\nset -l inside_worktree $repo_info[4]\nset -l short_sha\nif test (count $repo_info) = 5\nset short_sha $repo_info[5]\nend\n\nset -l rbc (__fish_git_prompt_operation_branch_bare $repo_info)\nset -l r $rbc[1] # current operation\nset -l b $rbc[2] # current branch\nset -l detached $rbc[3]\nset -l w #dirty working directory\nset -l i #staged changes\nset -l s #stashes\nset -l u #untracked\nset -l c $rbc[4] # bare repository\nset -l p #upstream\nset -l informative_status\n\n__fish_git_prompt_validate_chars\n__fish_git_prompt_validate_colors\n\nif test "true" = $inside_worktree\nif test -n "$__fish_git_prompt_show_informative_status"\nset informative_status "$___fish_git_prompt_char_stateseparator"(__fish_git_prompt_informative_status)\nelse\nif test -n "$__fish_git_prompt_showdirtystate"\nset -l config (command git config --bool bash.showDirtyState)\nif test "$config" != "false"\nset w (__fish_git_prompt_dirty)\nset i (__fish_git_prompt_staged $short_sha)\nend\nend\n\nif test -n "$__fish_git_prompt_showstashstate" -a -r $git_dir/refs/stash\nset s $___fish_git_prompt_char_stashstate\nend\n\nif test -n "$__fish_git_prompt_showuntrackedfiles"\nset -l config (command git config --bool bash.showUntrackedFiles)\nif test "$config" != false\nif command git ls-files --others --exclude-standard --error-unmatch -- '*' > /dev/null ^ /dev/null\nset u $___fish_git_prompt_char_untrackedfiles\nend\nend\nend\nend\n\nif test -n "$__fish_git_prompt_showupstream" -o "$__fish_git_prompt_show_informative_status"\nset p (__fish_git_prompt_show_upstream)\nend\nend\n\nset -l branch_color $___fish_git_prompt_color_branch\nset -l branch_done $___fish_git_prompt_color_branch_done\nif test -n "$__fish_git_prompt_showcolorhints"\nif test $detached = yes\nset branch_color $___fish_git_prompt_color_branch_detached\nset branch_done $___fish_git_prompt_color_branch_detached_done\nend\nend\n\nif test -n "$w"\nset w "$___fish_git_prompt_color_dirtystate$w$___fish_git_prompt_color_dirtystate_done"\nend\nif test -n "$i"\nset i "$___fish_git_prompt_color_stagedstate$i$___fish_git_prompt_color_stagedstate_done"\nend\nif test -n "$s"\nset s "$___fish_git_prompt_color_stashstate$s$___fish_git_prompt_color_stashstate_done"\nend\nif test -n "$u"\nset u "$___fish_git_prompt_color_untrackedfiles$u$___fish_git_prompt_color_untrackedfiles_done"\nend\nset b (echo $b | sed 's|refs/heads/||')\nif test -n "$b"\nset b "$branch_color$b$branch_done"\nend\nif test -n "$c"\nset c "$___fish_git_prompt_color_bare$c$___fish_git_prompt_color_bare_done"\nend\nif test -n "$r"\nset r "$___fish_git_prompt_color_merging$r$___fish_git_prompt_color_merging_done"\nend\nif test -n "$p"\nset p "$___fish_git_prompt_color_upstream$p$___fish_git_prompt_color_upstream_done"\nend\n\n# Formatting\nset -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"\nset -l f "$w$i$s$u"\nif test -n "$f"\nset f "$space$f"\nend\nset -l format $argv[1]\nif test -z "$format"\nset format " (%s)"\nend\n\nprintf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___git_ps_color_suffix_done"\nend
  when: 1468397636
